Algorithm: Symbolic Interval Analysis
Inputs:
    network: tested neural network
    input: input interval

Steps:
1. Initialize eq = (equp, eqlow)
2. Cache mask matrix needed in backward propagation
   R[numLayer][layerSize]
3. For each layer from 1 to numLayer:
   a. Matmal equations with weights as interval: eq = weight * eq
   b. If the current layer is not the last layer:
      i. For each node i in the layer:
         - If equp[i] ≤ 0:
           -- Update to 0
           -- R[layer][i] = [0, 0]
           -- d(relu(x))/dx = [0, 0]
           -- equp[i] = 0, eqlow[i] = 0
         - Else if eqlow[i] ≥ 0:
           -- Keep dependency
           -- R[layer][i] = [1, 1]
           -- d(relu(x))/dx = [1, 1]
         - Else:
           -- Concretization
           -- R[layer][i] = [0, 1]
           -- d(relu(x))/dx = [0, 1]
           -- eqlow[i] = 0
           -- If equp[i] > 0 then equp[i] = equp[i]
4. Output the results: {lower, upper}
5. Return R, output
